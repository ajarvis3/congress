{"version":3,"sources":["logo.svg","Constants.js","Population.js","App.js","reportWebVitals.js","index.js"],"names":["NON_STATES","State","props","name","pop","sen1","sen2","Population","useState","data","setData","fullData","setFullData","useEffect","fetch","then","accept","json","filter","value","state","includes","sort","a","b","localeCompare","map","key","length","senate","tempData","index","states","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAAe,I,YCIFA,G,MAAa,CAAC,OAAQ,uBAAwB,gBCA3D,SAASC,EAAMC,GAAQ,IACZC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,IAAKC,EAAcH,EAAdG,KAAMC,EAAQJ,EAARI,KACxB,OAAQ,+BACJ,6BAAKH,IACL,6BAAKC,IACL,6BAAKC,EAAOA,EAAKF,KAAO,KACxB,6BAAKG,EAAOA,EAAKH,KAAO,QA4FjBI,MAxFf,WAAuB,IAAD,EACMC,mBAAS,IADf,mBACXC,EADW,KACLC,EADK,OAEcF,mBAAS,IAFvB,mBAEXG,EAFW,KAEDC,EAFC,KAKlBC,qBAAU,WACNC,MDpBsB,4ECoBAC,MAAK,SAACC,GAExB,OADWA,EAAOC,UAEnBF,MAAK,SAACN,IACLA,EAAOA,EAAKS,QAAO,SAACC,GAChB,IAAMC,EAAQD,EAAM,GAEpB,OADanB,EAAWqB,SAASD,OAGhCE,MAAK,SAACC,EAAGC,GACV,OAAOD,EAAE,GAAGE,cAAcD,EAAE,OAEhCf,EAAOA,EAAKiB,KAAI,SAACP,GACb,MAAO,CACHC,MAAOD,EAAM,GACbf,IAAKe,EAAM,GACXQ,IAAKR,EAAM,OAGnBT,EAAQD,GACRG,EAAYH,QAEjB,IAGHI,qBAAU,WACc,IAAhBJ,EAAKmB,QAGTd,MD/CkB,gDC+CAC,MAAK,SAACC,GAEpB,OADWA,EAAOC,UAEnBF,MAAK,SAACc,GACLA,EAAOP,MAAK,SAACC,EAAGC,GACZ,OAAOD,EAAEH,MAAMK,cAAcD,EAAEJ,UAEnC,IAAMU,EAAWrB,EAAKiB,KAAI,SAACP,EAAOY,GAC9B,MAAO,CACHX,MAAOD,EAAMC,MACbhB,IAAKe,EAAMf,IACXC,KAAMwB,EAAe,EAARE,GACbzB,KAAMuB,EAAe,EAARE,EAAY,GACzBJ,IAAKR,EAAMQ,QAGnBf,EAAYkB,QAEjB,CAACrB,IAEJ,IAAMuB,EAASrB,EAASe,KAAI,SAACP,GACzB,OAAO,cAAClB,EAAD,CACKE,KAAMgB,EAAMC,MACZhB,IAAKe,EAAMf,IACXC,KAAMc,EAAMd,KACZC,KAAMa,EAAMb,MACPa,EAAMQ,QAE3B,OAAO,8BACH,kCACI,gCACI,+BACI,sCAGA,4CAGA,2CAGA,gDAKR,gCACKK,UClFFC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.885e88ac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const POPULATION_API = \"https://api.census.gov/data/2019/pep/population?get=NAME,POP&for=state:*\"; \r\n\r\nexport const SENATE_API = \"https://pure-escarpment-36309.herokuapp.com/\";\r\n\r\nexport const NON_STATES = [\"NAME\", \"District of Columbia\", \"Puerto Rico\"];","import React, { useEffect, useState } from 'react';\r\nimport './Population.css';\r\nimport {POPULATION_API, SENATE_API, NON_STATES} from './Constants';\r\n\r\nfunction State(props) {\r\n    const {name, pop, sen1, sen2} = props;\r\n    return (<tr>\r\n        <td>{name}</td>\r\n        <td>{pop}</td>\r\n        <td>{sen1 ? sen1.name : \"\"}</td>\r\n        <td>{sen2 ? sen2.name : \"\"}</td>\r\n    </tr>)\r\n}\r\n\r\nfunction Population() {\r\n    const [data, setData] = useState([]);\r\n    const [fullData, setFullData] = useState([]);\r\n\r\n    // Get Population Data\r\n    useEffect(() => {\r\n        fetch(POPULATION_API).then((accept) => {\r\n            let data = accept.json();\r\n            return data;\r\n        }).then((data) => {\r\n            data = data.filter((value) => {\r\n                const state = value[0];\r\n                const res = !NON_STATES.includes(state);\r\n                return res;\r\n            });\r\n            data.sort((a, b) => {\r\n                return a[0].localeCompare(b[0]);\r\n            });\r\n            data = data.map((value) => {\r\n                return {\r\n                    state: value[0],\r\n                    pop: value[1],\r\n                    key: value[2]\r\n                }\r\n            });\r\n            setData(data);\r\n            setFullData(data);\r\n        });\r\n    }, []);\r\n\r\n    // Get Senators?\r\n    useEffect(() => {\r\n        if (data.length === 0) {\r\n            return;\r\n        }\r\n        fetch(SENATE_API).then((accept) => {\r\n            let data = accept.json();\r\n            return data;\r\n        }).then((senate) => {\r\n            senate.sort((a, b) => {\r\n                return a.state.localeCompare(b.state);\r\n            });\r\n            const tempData = data.map((value, index) => {\r\n                return {\r\n                    state: value.state,\r\n                    pop: value.pop,\r\n                    sen1: senate[index * 2],\r\n                    sen2: senate[index * 2 + 1],\r\n                    key: value.key\r\n                }\r\n            });\r\n            setFullData(tempData);\r\n        });\r\n    }, [data])\r\n\r\n    const states = fullData.map((value) => {\r\n        return <State \r\n                    name={value.state} \r\n                    pop={value.pop} \r\n                    sen1={value.sen1}\r\n                    sen2={value.sen2}\r\n                    key={value.key} />\r\n    });\r\n    return <div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>\r\n                        Name\r\n                    </th>\r\n                    <th>\r\n                        Population\r\n                    </th>\r\n                    <th>\r\n                        Senator 1\r\n                    </th>\r\n                    <th>\r\n                        Senator 2\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {states}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n}\r\n\r\nexport default Population;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Population from \"./Population\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Population />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}